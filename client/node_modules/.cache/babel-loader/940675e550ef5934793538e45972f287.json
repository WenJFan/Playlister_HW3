{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  STORE: \"STORE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markListForDeletionId: null,\n    markListForDeletion: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n      case GlobalStoreActionType.STORE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            markSongForDeletionId: payload.markSongForDeletionId,\n            markListForDeletionId: payload.markListForDeletionId,\n            markListForDeletion: payload.markListForDeletion\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs() {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n  store.deleteList = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        //playlist.name = newName;\n        async function deleteList(playlist) {\n          response = await api.deletePlaylist(playlist._id);\n          if (response.data.success) {\n            async function getListPairs() {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        deleteList(playlist);\n      }\n    }\n    asyncDeleteList(id);\n  };\n  store.createNewList = function () {\n    async function asyncCreateList() {\n      let newList = {\n        name: \"Untitled\" + store.newListCounter,\n        songs: []\n      };\n      let response = await api.createPlaylist(newList);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        async function getListPairs(playlist) {\n          response = await api.getPlaylistPairs();\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.CREATE_NEW_LIST,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n        }\n        getListPairs(playlist);\n      }\n    }\n    asyncCreateList();\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.showDeleteList = function (id) {\n    async function asyncSetListForDeletion(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.STORE,\n            payload: {\n              markSongForDeletionId: null,\n              markListForDeletionId: id,\n              markListForDeletion: playlist\n            }\n          });\n          //store.history.push(\"/playlist/\" + playlist._id);\n          let modal = document.getElementById(\"delete-list-modal\");\n          modal.classList.add(\"is-visible\");\n        }\n      }\n    }\n    asyncSetListForDeletion(id);\n\n    /*storeReducer({\n        type: GlobalStoreActionType.STORE,\n        payload: {\n            markListForDeletionId: id,\n            markListForDeletionName: name\n        }\n    });*/\n  };\n\n  store.hideDeleteList = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.showDeleteSong = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.STORE,\n      payload: {\n        markSongForDeletionId: id,\n        markListForDeletionId: null,\n        markListForDeletion: null\n      }\n    });\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSong = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.addNewSong = function () {\n    let cur = store.currentList;\n    let currentId = store.currentList._id;\n    let newSong = {\n      title: \"Untitle\",\n      artist: \"Unknown\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    cur.songs[store.getPlaylistSize()] = newSong;\n    async function asyncAddSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, cur);\n      ;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n        store.history.push(\"/playlist/\" + currentId);\n        //store.setCurrentList(response.data.playlist._id);\n      }\n    }\n\n    asyncAddSong(currentId, cur);\n  };\n  store.deleteSong = function () {\n    let cur = store.currentList;\n    let currentId = store.currentList._id;\n    let tempArray = cur.songs.filter(song => cur.songs.indexOf(song) !== store.markSongForDeletionId);\n    cur.songs = tempArray;\n    async function asyncDeleteSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, cur);\n      ;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n        store.history.push(\"/playlist/\" + currentId);\n        //store.setCurrentList(response.data.playlist._id);\n      }\n    }\n\n    asyncDeleteSong(currentId, cur);\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"vz31vpO2n6wgQRFnfH5BqoFeVHc=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","STORE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markListForDeletionId","markListForDeletion","storeReducer","action","type","payload","markSongForDeletionId","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playlist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","deleteList","asyncDeleteList","deletePlaylist","createNewList","asyncCreateList","newList","songs","createPlaylist","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","showDeleteList","asyncSetListForDeletion","modal","document","getElementById","classList","add","hideDeleteList","remove","showDeleteSong","hideDeleteSong","addNewSong","cur","currentId","newSong","title","artist","youTubeId","asyncAddSong","deleteSong","tempArray","filter","song","indexOf","asyncDeleteSong"],"sources":["/Users/wenjunfan/Desktop/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    STORE: \"STORE\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markListForDeletionId : null,\n        markListForDeletion : null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n            case GlobalStoreActionType.STORE:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: store.listNameActive,\n                    markSongForDeletionId : payload.markSongForDeletionId,\n                    markListForDeletionId : payload.markListForDeletionId,\n                    markListForDeletion : payload.markListForDeletion,\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs() {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    store.deleteList = function(id){\n        async function asyncDeleteList(id){\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                //playlist.name = newName;\n                async function deleteList(playlist) {\n                    response = await api.deletePlaylist(playlist._id);\n                    if (response.data.success) {\n                        async function getListPairs() {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                deleteList(playlist);\n            }\n        }\n        asyncDeleteList(id);\n    }\n    store.createNewList = function(){\n        async function asyncCreateList(){\n            let newList = {\n                name:\"Untitled\"+store.newListCounter,\n                songs: []\n            }\n            let response = await api.createPlaylist(newList);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                async function getListPairs(playlist){\n                    response = await api.getPlaylistPairs();\n                    if (response.data.success){\n                        let pairsArray = response.data.idNamePairs;\n                        storeReducer({\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\n                            payload: {\n                                idNamePairs: pairsArray,\n                                playlist: playlist\n                            }\n                        });\n                    }   \n                }\n                getListPairs(playlist);\n            }\n        }\n        asyncCreateList();\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    \n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.showDeleteList = function(id){\n        async function asyncSetListForDeletion(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.STORE,\n                        payload: {\n                            markSongForDeletionId:null,\n                            markListForDeletionId : id,\n                            markListForDeletion : playlist,}\n                    });\n                    //store.history.push(\"/playlist/\" + playlist._id);\n                    let modal = document.getElementById(\"delete-list-modal\");\n                    modal.classList.add(\"is-visible\");\n                }\n            }\n            \n        }\n        asyncSetListForDeletion(id);\n        \n        /*storeReducer({\n            type: GlobalStoreActionType.STORE,\n            payload: {\n                markListForDeletionId: id,\n                markListForDeletionName: name\n            }\n        });*/\n        \n    }\n\n    store.hideDeleteList = function(){\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showDeleteSong = function(id){\n        storeReducer({\n            type: GlobalStoreActionType.STORE,\n            payload: {\n                markSongForDeletionId : id,\n                markListForDeletionId : null,\n                markListForDeletion : null,}\n        });\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteSong = function(){\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.addNewSong = function(){\n        let cur = store.currentList;\n        let currentId = store.currentList._id\n        let newSong = {\n            title:\"Untitle\",\n            artist:\"Unknown\",\n            youTubeId:\"dQw4w9WgXcQ\"\n        }  \n        cur.songs[store.getPlaylistSize()] = newSong;\n        async function asyncAddSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, cur);;\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n                store.history.push(\"/playlist/\" + currentId);\n                //store.setCurrentList(response.data.playlist._id);\n            }\n        }\n        asyncAddSong(currentId,cur);\n        \n    }\n\n    store.deleteSong = function(){\n        let cur = store.currentList;\n        let currentId = store.currentList._id\n        let tempArray=cur.songs.filter(song=>cur.songs.indexOf(song)!==store.markSongForDeletionId);\n        cur.songs = tempArray;\n        async function asyncDeleteSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, cur);;\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n                store.history.push(\"/playlist/\" + currentId);\n                //store.setCurrentList(response.data.playlist._id);\n            }\n        }\n        asyncDeleteSong(currentId,cur);\n    }\n    \n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}