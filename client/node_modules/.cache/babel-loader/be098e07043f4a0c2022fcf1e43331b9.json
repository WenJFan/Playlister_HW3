{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  STORE: \"STORE\",\n  DRAG: \"DRAG\",\n  MODAL: \"MODAL\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    ctrlPressed: false,\n    Modalopen: false,\n    markSongForEditionId: null,\n    markSongForEdition: null,\n    markSongForDeletion: null,\n    markSongForDeletionId: null,\n    markListForDeletionId: null,\n    markListForDeletion: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n      case GlobalStoreActionType.DRAG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      case GlobalStoreActionType.MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            ModalOpen: payload.ModalOpen,\n            markSongForEditionId: store.markSongForEditionId,\n            markSongForEdition: store.markSongForEdition,\n            markSongForDeletion: store.markSongForDeletion,\n            markSongForDeletionId: store.markSongForDeletionId,\n            markListForDeletionId: store.markListForDeletionId,\n            markListForDeletion: store.markListForDeletion\n          });\n        }\n      case GlobalStoreActionType.STORE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            markSongForEditionId: payload.markSongForEditionId,\n            markSongForEdition: payload.markSongForEdition,\n            markSongForDeletion: payload.markSongForDeletion,\n            markSongForDeletionId: payload.markSongForDeletionId,\n            markListForDeletionId: payload.markListForDeletionId,\n            markListForDeletion: payload.markListForDeletion\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs() {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n  store.canUndo = function () {\n    return tps.hasTransactionToUndo() && !store.Modalopen;\n  };\n  store.canRedo = function () {\n    return tps.hasTransactionToRedo() && !store.Modalopen;\n  };\n  store.deleteList = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        //playlist.name = newName;\n        async function deleteList(playlist) {\n          response = await api.deletePlaylist(playlist._id);\n          if (response.data.success) {\n            async function getListPairs() {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        deleteList(playlist);\n      }\n    }\n    asyncDeleteList(id);\n  };\n  store.createNewList = function () {\n    async function asyncCreateList() {\n      let newList = {\n        name: \"Untitled\" + store.newListCounter,\n        songs: []\n      };\n      let response = await api.createPlaylist(newList);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        async function getListPairs(playlist) {\n          response = await api.getPlaylistPairs();\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.CREATE_NEW_LIST,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n          store.setCurrentList(playlist._id);\n        }\n        getListPairs(playlist);\n      }\n    }\n    asyncCreateList();\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    tps.clearAllTransactions();\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.showDeleteList = function (id) {\n    async function asyncSetListForDeletion(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.STORE,\n            payload: {\n              markSongForEditionId: null,\n              markSongForEdition: null,\n              markSongForDeletion: null,\n              markSongForDeletionId: null,\n              markListForDeletionId: id,\n              markListForDeletion: playlist\n            }\n          });\n          //store.history.push(\"/playlist/\" + playlist._id);\n          let modal = document.getElementById(\"delete-list-modal\");\n          modal.classList.add(\"is-visible\");\n          storeReducer({\n            type: GlobalStoreActionType.MODAL,\n            payload: {\n              Modalopen: true\n            }\n          });\n        }\n      }\n    }\n    asyncSetListForDeletion(id);\n\n    /*storeReducer({\n        type: GlobalStoreActionType.STORE,\n        payload: {\n            markListForDeletionId: id,\n            markListForDeletionName: name\n        }\n    });*/\n  };\n\n  store.hideDeleteList = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MODAL,\n      payload: {\n        Modalopen: false\n      }\n    });\n  };\n  store.hideDeleteSong = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    storeReducer({\n      type: GlobalStoreActionType.MODAL,\n      payload: {\n        Modalopen: false\n      }\n    });\n    modal.classList.remove(\"is-visible\");\n  };\n  store.addAddSongTransaction = function () {\n    let t = \"Untitle\";\n    let a = \"Unknown\";\n    let i = \"dQw4w9WgXcQ\";\n    let s = store.getPlaylistSize();\n    let transaction = new AddSong_Transaction(store, s, t, a, i);\n    tps.addTransaction(transaction);\n  };\n  store.addNewSong = function (index, t, a, i) {\n    let cur = store.currentList;\n    let currentId = store.currentList._id;\n    let newSong = {\n      title: t,\n      artist: a,\n      youTubeId: i\n    };\n    cur.songs.splice(index, 0, newSong);\n    async function asyncAddSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, cur);\n      ;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n        store.history.push(\"/playlist/\" + currentId);\n        //store.setCurrentList(response.data.playlist._id);\n      }\n    }\n\n    asyncAddSong(currentId, cur);\n  };\n  store.showDeleteSong = function (index) {\n    async function asyncsetDeleteSong(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let deleteSong = playlist.songs[index];\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.STORE,\n            payload: {\n              markSongForEditionId: null,\n              markSongForEdition: null,\n              markSongForDeletion: deleteSong,\n              markSongForDeletionId: index,\n              markListForDeletionId: null,\n              markListForDeletion: null\n            }\n          });\n          let modal = document.getElementById(\"delete-song-modal\");\n          /*storeReducer({\n              type: GlobalStoreActionType.MODAL,\n              payload: {Modalopen:true},\n          });*/\n          modal.classList.add(\"is-visible\");\n        }\n      }\n    }\n    asyncsetDeleteSong(index);\n  };\n  store.addDeleteSongTransaction = function (id) {\n    let song = store.markSongForDeletion;\n    let transaction = new DeleteSong_Transaction(store, id, song.title, song.artist, song.youTubeId);\n    tps.addTransaction(transaction);\n  };\n  store.deleteSongfunc = function (id) {\n    let cur = store.currentList;\n    let currentId = store.currentList._id;\n    let tempArray = cur.songs.filter(song => cur.songs.indexOf(song) !== id);\n    cur.songs = tempArray;\n    async function asyncDeleteSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, cur);\n      ;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n        store.history.push(\"/playlist/\" + currentId);\n      }\n    }\n    asyncDeleteSong(currentId, cur);\n  };\n  store.showEditSong = function (index) {\n    async function asyncsetEditSong(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let editSong = playlist.songs[index];\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.STORE,\n            payload: {\n              markSongForEditionId: index,\n              markSongForEdition: editSong,\n              markSongForDeletion: null,\n              markSongForDeletionId: null,\n              markListForDeletionId: null,\n              markListForDeletion: null\n            }\n          });\n          let modal = document.getElementById(\"edit-song-modal\");\n          let est = document.getElementById(\"text1\");\n          let esa = document.getElementById(\"text2\");\n          let esi = document.getElementById(\"text3\");\n          est.value = editSong.title;\n          esa.value = editSong.artist;\n          esi.value = editSong.youTubeId;\n          modal.classList.add(\"is-visible\");\n        }\n      }\n    }\n    asyncsetEditSong(index);\n  };\n  store.hideEditSong = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.addEditSongTransaction = function (index, Ot, Nt, Oa, Na, Oi, Ni) {\n    let transaction = new EditSong_Transaction(store, index, Ot, Nt, Oa, Na, Oi, Ni);\n    tps.addTransaction(transaction);\n  };\n  store.editSongfunc = function (index, t, a, i) {\n    let list = store.currentList;\n    let currentId = store.currentList._id;\n    list.songs[index].title = t;\n    list.songs[index].artist = a;\n    list.songs[index].youTubeId = i;\n    async function asyncEditSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, list);\n      ;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n        store.history.push(\"/playlist/\" + currentId);\n      }\n    }\n    asyncEditSong(currentId, list);\n  };\n  store.addMoveSongtransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(this, start, end);\n    tps.addTransaction(transaction);\n  };\n  store.moveSong = function (start, end) {\n    let list = store.currentList;\n    let currentId = store.currentList._id;\n\n    // WE NEED TO UPDATE THE STATE FOR THE APP\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n    async function asyncMoveSong(list) {\n      let response = await api.updatePlaylistById(store.currentList._id, list);\n      ;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DRAG,\n          payload: {\n            playlist: list\n          }\n        });\n        store.history.push(\"/playlist/\" + currentId);\n      }\n    }\n    asyncMoveSong(list);\n  };\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"1UTgVGhn4IO5jA2tHoDXS7K5SYY=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","MoveSong_Transaction","AddSong_Transaction","DeleteSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","STORE","DRAG","MODAL","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","ctrlPressed","Modalopen","markSongForEditionId","markSongForEdition","markSongForDeletion","markSongForDeletionId","markListForDeletionId","markListForDeletion","storeReducer","action","type","payload","playlist","ModalOpen","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","deleteList","asyncDeleteList","deletePlaylist","createNewList","asyncCreateList","newList","songs","createPlaylist","setCurrentList","closeCurrentList","clearAllTransactions","loadIdNamePairs","asyncLoadIdNamePairs","console","log","asyncSetCurrentList","history","push","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","showDeleteList","asyncSetListForDeletion","modal","document","getElementById","classList","add","hideDeleteList","remove","hideDeleteSong","addAddSongTransaction","t","a","i","s","transaction","addTransaction","addNewSong","index","cur","currentId","newSong","title","artist","youTubeId","splice","asyncAddSong","showDeleteSong","asyncsetDeleteSong","deleteSong","addDeleteSongTransaction","song","deleteSongfunc","tempArray","filter","indexOf","asyncDeleteSong","showEditSong","asyncsetEditSong","editSong","est","esa","esi","value","hideEditSong","addEditSongTransaction","Ot","Nt","Oa","Na","Oi","Ni","editSongfunc","list","asyncEditSong","addMoveSongtransaction","start","end","moveSong","temp","asyncMoveSong"],"sources":["/Users/wenjunfan/Desktop/Playlister_HW3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    STORE: \"STORE\",\n    DRAG: \"DRAG\",\n    MODAL:\"MODAL\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        ctrlPressed: false,\n        Modalopen:false,\n        markSongForEditionId:null,\n        markSongForEdition: null,\n        markSongForDeletion: null,\n        markSongForDeletionId: null,\n        markListForDeletionId: null,\n        markListForDeletion: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n            case GlobalStoreActionType.DRAG:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            case GlobalStoreActionType.MODAL:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    ModalOpen:payload.ModalOpen,\n                    markSongForEditionId:store.markSongForEditionId,\n                    markSongForEdition:store.markSongForEdition,\n                    markSongForDeletion:store.markSongForDeletion,\n                    markSongForDeletionId:store.markSongForDeletionId,\n                    markListForDeletionId: store.markListForDeletionId,\n                    markListForDeletion: store.markListForDeletion,\n                });\n            }\n            case GlobalStoreActionType.STORE:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: store.listNameActive,\n                    markSongForEditionId: payload.markSongForEditionId,\n                    markSongForEdition: payload.markSongForEdition,\n                    markSongForDeletion: payload.markSongForDeletion,\n                    markSongForDeletionId: payload.markSongForDeletionId,\n                    markListForDeletionId: payload.markListForDeletionId,\n                    markListForDeletion: payload.markListForDeletion,\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs() {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n    store.canUndo = function(){\n        return tps.hasTransactionToUndo()&&!store.Modalopen;\n    }\n    store.canRedo = function(){\n        return tps.hasTransactionToRedo()&&!store.Modalopen;\n    }\n    store.deleteList = function(id){\n        async function asyncDeleteList(id){\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                //playlist.name = newName;\n                async function deleteList(playlist) {\n                    response = await api.deletePlaylist(playlist._id);\n                    if (response.data.success) {\n                        async function getListPairs() {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                deleteList(playlist);\n            }\n        }\n        asyncDeleteList(id);\n    }\n    store.createNewList = function(){\n        async function asyncCreateList(){\n            let newList = {\n                name:\"Untitled\"+store.newListCounter,\n                songs: []\n            }\n            let response = await api.createPlaylist(newList);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                async function getListPairs(playlist){\n                    response = await api.getPlaylistPairs();\n                    if (response.data.success){\n                        let pairsArray = response.data.idNamePairs;\n                        storeReducer({\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\n                            payload: {\n                                idNamePairs: pairsArray,\n                                playlist: playlist\n                            }\n                        });\n                    }store.setCurrentList(playlist._id)   \n                }\n                getListPairs(playlist);\n            }\n        }\n        asyncCreateList();\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        tps.clearAllTransactions();\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    \n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.showDeleteList = function(id){\n        async function asyncSetListForDeletion(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.STORE,\n                        payload: {\n                            markSongForEditionId:null,\n                            markSongForEdition:null,\n                            markSongForDeletion:null,\n                            markSongForDeletionId:null,\n                            markListForDeletionId: id,\n                            markListForDeletion: playlist,}\n                    });\n                    //store.history.push(\"/playlist/\" + playlist._id);\n                    let modal = document.getElementById(\"delete-list-modal\");\n                    modal.classList.add(\"is-visible\");\n                    storeReducer({\n                        type: GlobalStoreActionType.MODAL,\n                        payload: {Modalopen:true},\n                    });\n                }\n            }\n            \n        }\n        asyncSetListForDeletion(id);\n        \n        /*storeReducer({\n            type: GlobalStoreActionType.STORE,\n            payload: {\n                markListForDeletionId: id,\n                markListForDeletionName: name\n            }\n        });*/\n        \n    }\n\n    store.hideDeleteList = function(){\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MODAL,\n            payload: {Modalopen:false},\n        });\n    }\n\n    \n\n    store.hideDeleteSong = function(){\n        let modal = document.getElementById(\"delete-song-modal\");\n        storeReducer({\n            type: GlobalStoreActionType.MODAL,\n            payload: {Modalopen:false},\n        });\n        modal.classList.remove(\"is-visible\");\n    }\n    store.addAddSongTransaction = function(){\n        let t =\"Untitle\";\n        let a = \"Unknown\";\n        let i = \"dQw4w9WgXcQ\";\n        let s = store.getPlaylistSize();\n        let transaction = new AddSong_Transaction(store,s,t,a,i);\n        tps.addTransaction(transaction);\n    }\n    store.addNewSong = function(index,t,a,i){\n        let cur = store.currentList;\n        let currentId = store.currentList._id\n        let newSong = {\n            title:t,\n            artist:a,\n            youTubeId:i\n        }  \n        cur.songs.splice(index, 0, newSong);\n        async function asyncAddSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, cur);;\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n                store.history.push(\"/playlist/\" + currentId);\n                //store.setCurrentList(response.data.playlist._id);\n            }\n        }\n        asyncAddSong(currentId,cur);\n        \n    }\n\n    store.showDeleteSong = function(index){\n        async function asyncsetDeleteSong(index){\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                let deleteSong = playlist.songs[index]\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.STORE,\n                        payload: {\n                            markSongForEditionId:null,\n                            markSongForEdition:null,\n                            markSongForDeletion: deleteSong,\n                            markSongForDeletionId: index,\n                            markListForDeletionId: null,\n                            markListForDeletion: null}\n                    });\n                    let modal = document.getElementById(\"delete-song-modal\");\n                    /*storeReducer({\n                        type: GlobalStoreActionType.MODAL,\n                        payload: {Modalopen:true},\n                    });*/\n                    modal.classList.add(\"is-visible\");\n                }\n            }\n        }\n        asyncsetDeleteSong(index);\n    }\n    store.addDeleteSongTransaction = function(id){\n        let song = store.markSongForDeletion;\n        let transaction = new DeleteSong_Transaction(store,id,song.title,song.artist,song.youTubeId);\n        tps.addTransaction(transaction);\n    }\n    store.deleteSongfunc = function(id){\n        let cur = store.currentList;\n        let currentId = store.currentList._id;\n        let tempArray=cur.songs.filter(song=>cur.songs.indexOf(song)!==id);\n        cur.songs = tempArray;\n        async function asyncDeleteSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, cur);;\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n                store.history.push(\"/playlist/\" + currentId);\n            }\n        }\n        asyncDeleteSong(currentId,cur);\n    }\n    store.showEditSong = function(index){\n        async function asyncsetEditSong(index){\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                let editSong = playlist.songs[index]\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.STORE,\n                        payload: {\n                            markSongForEditionId: index,\n                            markSongForEdition: editSong,\n                            markSongForDeletion: null,\n                            markSongForDeletionId: null,\n                            markListForDeletionId: null,\n                            markListForDeletion: null}\n                    });\n                    let modal = document.getElementById(\"edit-song-modal\");\n                    let est = document.getElementById(\"text1\");\n                    let esa = document.getElementById(\"text2\");\n                    let esi = document.getElementById(\"text3\");\n                    est.value = editSong.title;\n                    esa.value = editSong.artist;\n                    esi.value = editSong.youTubeId;\n                    modal.classList.add(\"is-visible\");\n                }\n            }\n        }\n        asyncsetEditSong(index);\n    }\n    store.hideEditSong= function (){\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    store.addEditSongTransaction = function(index,Ot,Nt,Oa,Na,Oi,Ni){\n        let transaction = new EditSong_Transaction(store,index,Ot,Nt,Oa,Na,Oi,Ni);\n        tps.addTransaction(transaction);\n    }\n    store.editSongfunc = function(index,t,a,i){\n        let list = store.currentList;\n        let currentId = store.currentList._id;\n        list.songs[index].title = t;\n        list.songs[index].artist = a;\n        list.songs[index].youTubeId = i;\n        async function asyncEditSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, list);;\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n                store.history.push(\"/playlist/\" + currentId);\n            }\n        }\n        asyncEditSong(currentId,list);\n    }\n    store.addMoveSongtransaction = function(start,end){\n        let transaction = new MoveSong_Transaction(this, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.moveSong = function(start,end){\n        let list = store.currentList;\n        let currentId = store.currentList._id;\n\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        if (start < end) {\n            let temp = list.songs[start];\n            for (let i = start; i < end; i++) {\n                list.songs[i] = list.songs[i + 1];\n            }\n            list.songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = list.songs[start];\n            for (let i = start; i > end; i--) {\n                list.songs[i] = list.songs[i - 1];\n            }\n            list.songs[end] = temp;\n        }\n        async function asyncMoveSong(list) {\n            let response = await api.updatePlaylistById(store.currentList._id, list);;\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.DRAG,\n                    payload: {playlist:list}\n                });\n                store.history.push(\"/playlist/\" + currentId);\n            }\n        }\n        asyncMoveSong(list);\n    }\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}